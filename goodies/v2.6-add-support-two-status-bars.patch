From 40f6a945c24116d7c0babaa3e30c1ddfd469ee7c Mon Sep 17 00:00:00 2001
From: Tony Fischetti <tony.fischetti@gmail.com>
Date: Thu, 9 Apr 2020 18:00:27 -0400
Subject: [PATCH] add support two status bars

---
 cmd-resize-pane.c |  12 +--
 cmd.c             |   8 +-
 options-table.c   | 134 +++++++++++++++++++++++++++++++++
 resize.c          |  17 +++--
 screen-redraw.c   |  99 ++++++++++++++++---------
 server-client.c   |  19 +++--
 status.c          | 184 ++++++++++++++++++++++++++++++++++++++++++++++
 tmux.h            |   8 ++
 tty.c             |   3 +-
 9 files changed, 424 insertions(+), 60 deletions(-)

diff --git a/cmd-resize-pane.c b/cmd-resize-pane.c
index bbb78de73d62c..5f4dfd3b02673 100644
--- a/cmd-resize-pane.c
+++ b/cmd-resize-pane.c
@@ -139,15 +139,15 @@ cmd_resize_pane_mouse_update(struct client *c, struct mouse_event *m)
 	}
 
 	y = m->y; x = m->x;
-	if (m->statusat == 0 && y > 0)
+	if (m->anyatzero && y > 0)
 		y--;
-	else if (m->statusat > 0 && y >= (u_int)m->statusat)
-		y = m->statusat - 1;
+	if (m->anyonlast && y >= (u_int)m->auxstatusat + (u_int)m->statusat)
+		y = m->auxstatusat + m->statusat - 1;
 	ly = m->ly; lx = m->lx;
-	if (m->statusat == 0 && ly > 0)
+	if (m->anyatzero && ly > 0)
 		ly--;
-	else if (m->statusat > 0 && ly >= (u_int)m->statusat)
-		ly = m->statusat - 1;
+	if (m->anyonlast && ly >= (u_int)m->auxstatusat + (u_int)m->statusat)
+		ly = m->auxstatusat + m->statusat - 1;
 
 	wp_x = wp_y = NULL;
 	TAILQ_FOREACH(loop, &wl->window->panes, entry) {
diff --git a/cmd.c b/cmd.c
index 45f83c2cebdd3..8bc3b12e01f26 100644
--- a/cmd.c
+++ b/cmd.c
@@ -473,10 +473,10 @@ cmd_mouse_at(struct window_pane *wp, struct mouse_event *m, u_int *xp,
 		y = m->y;
 	}
 
-	if (m->statusat == 0 && y > 0)
-		y--;
-	else if (m->statusat > 0 && y >= (u_int)m->statusat)
-		y = m->statusat - 1;
+    if (m->anyatzero && y > 0)
+        y--;
+    if (m->anyonlast && y >= m->auxstatusat + m->statusat)
+        y = m->auxstatusat + m->statusat - 1;
 
 	if (x < wp->xoff || x >= wp->xoff + wp->sx)
 		return (-1);
diff --git a/options-table.c b/options-table.c
index f5e973e50df22..98772ed28c0f8 100644
--- a/options-table.c
+++ b/options-table.c
@@ -360,6 +360,140 @@ const struct options_table_entry options_table[] = {
 	  .default_num = ALERT_OTHER
 	},
 
+	{ .name = "aux-status",
+	  .type = OPTIONS_TABLE_FLAG,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .default_num = 0
+	},
+
+	{ .name = "aux-status-attr",
+	  .type = OPTIONS_TABLE_ATTRIBUTES,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .default_num = 0,
+	  .style = "aux-status-style"
+	},
+
+	{ .name = "aux-status-bg",
+	  .type = OPTIONS_TABLE_COLOUR,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .default_num = 2,
+	  .style = "aux-status-style"
+	},
+
+	{ .name = "aux-status-fg",
+	  .type = OPTIONS_TABLE_COLOUR,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .default_num = 0,
+	  .style = "aux-status-style"
+	},
+
+    /* aux status interval is the same as the main status interval */
+
+	{ .name = "aux-status-justify",
+	  .type = OPTIONS_TABLE_CHOICE,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .choices = options_table_status_justify_list,
+	  .default_num = 0
+	},
+
+    /* aux-status-keys is he same as the main status keys */
+
+	{ .name = "aux-status-left",
+	  .type = OPTIONS_TABLE_STRING,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  /* .default_str = "this is the left" */
+	  .default_str = ""
+	},
+
+	{ .name = "aux-status-left-attr",
+	  .type = OPTIONS_TABLE_ATTRIBUTES,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .default_num = 0,
+	  .style = "aux-status-left-style"
+	},
+
+	{ .name = "aux-status-left-bg",
+	  .type = OPTIONS_TABLE_COLOUR,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .default_num = 8,
+	  .style = "aux-status-left-style"
+	},
+
+	{ .name = "aux-status-left-fg",
+	  .type = OPTIONS_TABLE_COLOUR,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .default_num = 8,
+	  .style = "aux-status-left-style"
+	},
+
+	{ .name = "aux-status-left-length",
+	  .type = OPTIONS_TABLE_NUMBER,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .minimum = 0,
+	  .maximum = SHRT_MAX,
+	  .default_num = 10
+	},
+
+	{ .name = "aux-status-left-style",
+	  .type = OPTIONS_TABLE_STYLE,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .default_str = "default"
+	},
+
+	{ .name = "aux-status-position",
+	  .type = OPTIONS_TABLE_CHOICE,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .choices = options_table_status_position_list,
+	  .default_num = 0
+	},
+
+	{ .name = "aux-status-right",
+	  .type = OPTIONS_TABLE_STRING,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .default_str = "[#H]"
+	},
+
+	{ .name = "aux-status-right-attr",
+	  .type = OPTIONS_TABLE_ATTRIBUTES,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .default_num = 0,
+	  .style = "aux-status-right-style"
+	},
+
+	{ .name = "aux-status-right-bg",
+	  .type = OPTIONS_TABLE_COLOUR,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .default_num = 8,
+	  .style = "aux-status-right-style"
+	},
+
+	{ .name = "aux-status-right-fg",
+	  .type = OPTIONS_TABLE_COLOUR,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .default_num = 8,
+	  .style = "aux-status-right-style"
+	},
+
+	{ .name = "aux-status-right-length",
+	  .type = OPTIONS_TABLE_NUMBER,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .minimum = 0,
+	  .maximum = SHRT_MAX,
+	  .default_num = 40
+	},
+
+	{ .name = "aux-status-right-style",
+	  .type = OPTIONS_TABLE_STYLE,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .default_str = "default"
+	},
+
+	{ .name = "aux-status-style",
+	  .type = OPTIONS_TABLE_STYLE,
+	  .scope = OPTIONS_TABLE_SESSION,
+	  .default_str = "bg=green,fg=black"
+	},
+
 	{ .name = "status",
 	  .type = OPTIONS_TABLE_FLAG,
 	  .scope = OPTIONS_TABLE_SESSION,
diff --git a/resize.c b/resize.c
index 0fd30ba006eed..ac3cf47cd1b05 100644
--- a/resize.c
+++ b/resize.c
@@ -50,10 +50,13 @@ recalculate_sizes(void)
 	struct window		*w;
 	struct window_pane	*wp;
 	u_int			 ssx, ssy, has, limit;
-	int			 flag, has_status, is_zoomed, forced;
+	int          flag, has_status, has_aux_status, row_redux, is_zoomed, forced;
 
 	RB_FOREACH(s, sessions, &sessions) {
 		has_status = options_get_number(s->options, "status");
+		has_aux_status = options_get_number(s->options, "aux-status");
+
+        row_redux = has_status + has_aux_status;
 
 		s->attached = 0;
 		ssx = ssy = UINT_MAX;
@@ -66,10 +69,10 @@ recalculate_sizes(void)
 			if (c->session == s) {
 				if (c->tty.sx < ssx)
 					ssx = c->tty.sx;
-				if (has_status &&
-				    !(c->flags & CLIENT_CONTROL) &&
-				    c->tty.sy > 1 && c->tty.sy - 1 < ssy)
-					ssy = c->tty.sy - 1;
+				if (row_redux &&
+                    !(c->flags & CLIENT_CONTROL) &&
+                    c->tty.sy > 1 && c->tty.sy - 1 < ssy)
+					ssy = c->tty.sy - row_redux;
 				else if (c->tty.sy < ssy)
 					ssy = c->tty.sy;
 				s->attached++;
@@ -81,8 +84,8 @@ recalculate_sizes(void)
 		}
 		s->flags &= ~SESSION_UNATTACHED;
 
-		if (has_status && ssy == 0)
-			ssy = 1;
+		if (row_redux && ssy == 0)
+			ssy = row_redux;
 
 		if (s->sx == ssx && s->sy == ssy)
 			continue;
diff --git a/screen-redraw.c b/screen-redraw.c
index 6c4d84d868f2a..4d3d57c68eb0d 100644
--- a/screen-redraw.c
+++ b/screen-redraw.c
@@ -36,6 +36,7 @@ static void	screen_redraw_draw_pane_status(struct client *, int);
 static void	screen_redraw_draw_borders(struct client *, int, int, u_int);
 static void	screen_redraw_draw_panes(struct client *, u_int);
 static void	screen_redraw_draw_status(struct client *, u_int);
+static void	screen_redraw_draw_aux_status(struct client *, u_int);
 static void	screen_redraw_draw_number(struct client *, struct window_pane *,
 		    u_int);
 
@@ -348,12 +349,14 @@ screen_redraw_update(struct client *c)
 	struct options		*wo = w->options;
 	int			 redraw;
 
+	/* aux_status_redraw(c); */
+	/* status_redraw(c); */
 	if (c->message_string != NULL)
 		redraw = status_message_redraw(c);
 	else if (c->prompt_string != NULL)
 		redraw = status_prompt_redraw(c);
 	else
-		redraw = status_redraw(c);
+		redraw = aux_status_redraw(c) + status_redraw(c);
 	if (!redraw)
 		c->flags &= ~CLIENT_STATUS;
 
@@ -370,43 +373,54 @@ screen_redraw_update(struct client *c)
 
 /* Redraw entire screen. */
 void
-screen_redraw_screen(struct client *c, int draw_panes, int draw_status,
+screen_redraw_screen(struct client *c, int draw_panes, int draw_statuses,
     int draw_borders)
 {
 	struct options		*oo = c->session->options;
 	struct tty		*tty = &c->tty;
 	struct window		*w = c->session->curw->window;
 	struct options		*wo = w->options;
-	u_int			 top;
-	int	 		 status, pane_status, spos;
+	u_int			 top, top_filled;
+	int	 		 status, pane_status, aux_status, row_redux, spos, apos;
 
 	/* Suspended clients should not be updated. */
 	if (c->flags & CLIENT_SUSPENDED)
 		return;
 
+	status = options_get_number(oo, "status");
+	aux_status = options_get_number(oo, "aux-status");
+	row_redux = status + aux_status;
+
 	/* Get status line, er, status. */
 	spos = options_get_number(oo, "status-position");
+	apos = options_get_number(oo, "aux-status-position");
 	if (c->message_string != NULL || c->prompt_string != NULL)
 		status = 1;
-	else
-		status = options_get_number(oo, "status");
+	/* else */
+	/* 	status = options_get_number(oo, "status"); */
+
 	top = 0;
+	top_filled = 0;
 	if (status && spos == 0)
 		top = 1;
-	if (!status)
-		draw_status = 0;
+	if ((!status) && (!aux_status))
+		draw_statuses = 0;
+
+	if ((status && aux_status) || (status && (spos==0)) || (aux_status && (apos==0)))
+		top_filled = 1;
 
 	/* Draw the elements. */
-	if (draw_borders) {
-		pane_status = options_get_number(wo, "pane-border-status");
-		screen_redraw_draw_borders(c, status, pane_status, top);
-		if (pane_status != CELL_STATUS_OFF)
-			screen_redraw_draw_pane_status(c, pane_status);
-	}
+	if (draw_borders)
+		screen_redraw_draw_borders(c, row_redux, pane_status,  top_filled);
 	if (draw_panes)
-		screen_redraw_draw_panes(c, top);
-	if (draw_status)
-		screen_redraw_draw_status(c, top);
+		screen_redraw_draw_panes(c, top_filled);
+	if (draw_statuses){
+		if (status)
+			screen_redraw_draw_status(c, spos);
+		if (aux_status)
+			screen_redraw_draw_aux_status(c, apos);
+	}
+
 	tty_reset(tty);
 }
 
@@ -420,7 +434,7 @@ screen_redraw_pane(struct client *c, struct window_pane *wp)
 		return;
 
 	yoff = wp->yoff;
-	if (status_at_line(c) == 0)
+	if (any_status_at_zero(c))
 		yoff++;
 
 	log_debug("%s: redraw pane %%%u (at %u,%u)", c->name, wp->id,
@@ -433,8 +447,7 @@ screen_redraw_pane(struct client *c, struct window_pane *wp)
 
 /* Draw the borders. */
 static void
-screen_redraw_draw_borders(struct client *c, int status, int pane_status,
-    u_int top)
+screen_redraw_draw_borders(struct client *c, int row_redux, int pane_status, u_int top_filled)
 {
 	struct session		*s = c->session;
 	struct window		*w = s->curw->window;
@@ -449,7 +462,7 @@ screen_redraw_draw_borders(struct client *c, int status, int pane_status,
 	const char		*tmp;
 	size_t			 msglen = 0;
 
-	small = (tty->sy - status + top > w->sy) || (tty->sx > w->sx);
+	small = ((tty->sy - row_redux + top_filled > w->sy) || (tty->sx > w->sx));
 	if (small) {
 		flags = w->flags & (WINDOW_FORCEWIDTH|WINDOW_FORCEHEIGHT);
 		if (flags == (WINDOW_FORCEWIDTH|WINDOW_FORCEHEIGHT))
@@ -464,12 +477,12 @@ screen_redraw_draw_borders(struct client *c, int status, int pane_status,
 		    w->sx, w->sy, tmp);
 		msglen = strlen(msg);
 
-		if (tty->sy - 1 - status + top > w->sy && tty->sx >= msglen) {
+		if (tty->sy - 1 - row_redux + top_filled > w->sy && tty->sx >= msglen) {
 			msgx = tty->sx - msglen;
-			msgy = tty->sy - 1 - status + top;
+			msgy = tty->sy - 1 - row_redux + top_filled;
 		} else if (tty->sx - w->sx > msglen) {
 			msgx = tty->sx - msglen;
-			msgy = tty->sy - 1 - status + top;
+			msgy = tty->sy - 1 - row_redux + top_filled;
 		} else
 			small = 0;
 	}
@@ -483,7 +496,7 @@ screen_redraw_draw_borders(struct client *c, int status, int pane_status,
 	memcpy(&m_active_gc, &active_gc, sizeof m_active_gc);
 	m_active_gc.attr ^= GRID_ATTR_REVERSE;
 
-	for (j = 0; j < tty->sy - status; j++) {
+	for (j = 0; j < tty->sy - row_redux; j++) {
 		for (i = 0; i < tty->sx; i++) {
 			type = screen_redraw_check_cell(c, i, j, pane_status,
 			    &wp);
@@ -505,7 +518,7 @@ screen_redraw_draw_borders(struct client *c, int status, int pane_status,
 				tty_attributes(tty, &active_gc, NULL);
 			else
 				tty_attributes(tty, &other_gc, NULL);
-			tty_cursor(tty, i, top + j);
+			tty_cursor(tty, i, top_filled + j);
 			tty_putc(tty, CELL_BORDERS[type]);
 		}
 	}
@@ -520,7 +533,7 @@ screen_redraw_draw_borders(struct client *c, int status, int pane_status,
 
 /* Draw the panes. */
 static void
-screen_redraw_draw_panes(struct client *c, u_int top)
+screen_redraw_draw_panes(struct client *c, u_int top_filled)
 {
 	struct window		*w = c->session->curw->window;
 	struct tty		*tty = &c->tty;
@@ -531,27 +544,41 @@ screen_redraw_draw_panes(struct client *c, u_int top)
 		if (!window_pane_visible(wp))
 			continue;
 		for (i = 0; i < wp->sy; i++)
-			tty_draw_pane(tty, wp, i, wp->xoff, top + wp->yoff);
+            tty_draw_pane(tty, wp, i, wp->xoff, top_filled + wp->yoff);
 		if (c->flags & CLIENT_IDENTIFY)
-			screen_redraw_draw_number(c, wp, top);
+			screen_redraw_draw_number(c, wp, top_filled);
 	}
 }
 
 /* Draw the status line. */
 static void
-screen_redraw_draw_status(struct client *c, u_int top)
+screen_redraw_draw_status(struct client *c, u_int spos)
 {
 	struct tty	*tty = &c->tty;
 
-	if (top)
-		tty_draw_line(tty, NULL, &c->status, 0, 0, 0);
-	else
-		tty_draw_line(tty, NULL, &c->status, 0, 0, tty->sy - 1);
+    // top
+    if (spos==0)
+	    tty_draw_line(tty, NULL, &c->status, 0, 0, 0);
+    else
+	    tty_draw_line(tty, NULL, &c->status, 0, 0, tty->sy - 1);
+}
+
+/* Draw the auxiliary status line. */
+void
+screen_redraw_draw_aux_status(struct client *c, u_int apos)
+{
+	struct tty	*tty = &c->tty;
+  
+    // top
+    if (apos==0)
+        tty_draw_line(tty, NULL, &c->aux_status, 0, 0, 0);
+    else
+        tty_draw_line(tty, NULL, &c->aux_status, 0, 0, tty->sy - 1);
 }
 
 /* Draw number on a pane. */
 static void
-screen_redraw_draw_number(struct client *c, struct window_pane *wp, u_int top)
+screen_redraw_draw_number(struct client *c, struct window_pane *wp, u_int top_filled)
 {
 	struct tty		*tty = &c->tty;
 	struct session		*s = c->session;
@@ -575,7 +602,7 @@ screen_redraw_draw_number(struct client *c, struct window_pane *wp, u_int top)
 	px = wp->sx / 2; py = wp->sy / 2;
 	xoff = wp->xoff; yoff = wp->yoff;
 
-	if (top)
+	if (top_filled)
 		yoff++;
 
 	if (wp->sx < len * 6 || wp->sy < 5) {
diff --git a/server-client.c b/server-client.c
index 7c4af0d6b3498..f4e52c18f5486 100644
--- a/server-client.c
+++ b/server-client.c
@@ -194,6 +194,7 @@ server_client_create(int fd)
 	c->tty.sy = 24;
 
 	screen_init(&c->status, c->tty.sx, 1, 0);
+	screen_init(&c->aux_status, c->tty.sx, 1, 0);
 
 	c->message_string = NULL;
 	TAILQ_INIT(&c->message_log);
@@ -495,6 +496,9 @@ have_event:
 
 	/* Is this on the status line? */
 	m->statusat = status_at_line(c);
+	m->auxstatusat = aux_status_at_line(c);
+    m->anyatzero = any_status_at_zero(c);
+    m->anyonlast = any_status_on_last(c);
 	if (m->statusat != -1 && y == (u_int)m->statusat) {
 		w = status_get_window_at(c, x);
 		if (w == NULL)
@@ -506,10 +510,10 @@ have_event:
 
 	/* Not on status line. Adjust position and check for border or pane. */
 	if (where == NOWHERE) {
-		if (m->statusat == 0 && y > 0)
+		if (m->anyatzero && y > 0)
 			y--;
-		else if (m->statusat > 0 && y >= (u_int)m->statusat)
-			y = m->statusat - 1;
+		if (m->anyonlast && y >= m->auxstatusat + m->statusat)
+			y = m->auxstatusat + m->statusat - 1;
 
 		TAILQ_FOREACH(wp, &s->curw->window->panes, entry) {
 			if ((wp->xoff + wp->sx == x &&
@@ -1211,7 +1215,7 @@ server_client_reset_state(struct client *c)
 	struct window_pane	*wp = w->active, *loop;
 	struct screen		*s = wp->screen;
 	struct options		*oo = c->session->options;
-	int			 status, mode, o;
+	int			 status, aux_status, row_redux, mode, o1, o2;
 
 	if (c->flags & (CLIENT_CONTROL|CLIENT_SUSPENDED))
 		return;
@@ -1220,11 +1224,14 @@ server_client_reset_state(struct client *c)
 	tty_margin_off(&c->tty);
 
 	status = options_get_number(oo, "status");
+	aux_status = options_get_number(oo, "aux-status");
+    row_redux = status + aux_status;
 	if (!window_pane_visible(wp) || wp->yoff + s->cy >= c->tty.sy - status)
 		tty_cursor(&c->tty, 0, 0);
 	else {
-		o = status && options_get_number(oo, "status-position") == 0;
-		tty_cursor(&c->tty, wp->xoff + s->cx, o + wp->yoff + s->cy);
+		o1 = status && options_get_number(oo, "status-position") == 0;
+		o2 = aux_status && options_get_number(oo, "aux-status-position") == 0;
+        tty_cursor(&c->tty, wp->xoff + s->cx, o1 + o2 + wp->yoff + s->cy);
 	}
 
 	/*
diff --git a/status.c b/status.c
index b7d247150401b..503846b54d3cf 100644
--- a/status.c
+++ b/status.c
@@ -33,6 +33,10 @@ static char	*status_redraw_get_left(struct client *, time_t,
 		     struct grid_cell *, size_t *);
 static char	*status_redraw_get_right(struct client *, time_t,
 		     struct grid_cell *, size_t *);
+static char	*aux_status_redraw_get_left(struct client *, time_t,
+		     struct grid_cell *, size_t *);
+static char	*aux_status_redraw_get_right(struct client *, time_t,
+		     struct grid_cell *, size_t *);
 static char	*status_print(struct client *, struct winlink *, time_t,
 		     struct grid_cell *);
 static char	*status_replace(struct client *, struct winlink *, const char *,
@@ -215,6 +219,56 @@ status_at_line(struct client *c)
 	return (c->tty.sy - 1);
 }
 
+/* Get screen line of aux_status line. -1 means off. */
+int
+aux_status_at_line(struct client *c)
+{
+	struct session	*s = c->session;
+
+	if (!options_get_number(s->options, "aux-status"))
+		return (-1);
+
+	if (options_get_number(s->options, "aux-status-position") == 0)
+		return (0);
+	return (c->tty.sy - 1);
+}
+
+/* Is there any status (main or aux) at line zero? (1 True, 0 False) */
+int
+any_status_at_zero(struct client *c)
+{
+    struct session *s = c->session;
+
+    if (options_get_number(s->options, "status") &&
+         (options_get_number(s->options, "status-position")==0))
+        return 1;
+    if (options_get_number(s->options, "aux-status") &&
+         (options_get_number(s->options, "aux-status-position")==0))
+        return 1;
+    return 0;
+}
+
+/* Is there any status (main or aux) on last line? (1 True, 0 False) */
+int
+any_status_on_last(struct client *c)
+{
+    struct session *s = c->session;
+    int status, aux_status;
+
+    status = options_get_number(s->options, "status");
+    aux_status = options_get_number(s->options, "aux-status");
+
+    if (status && aux_status)
+        return 1;
+    if (status && options_get_number(s->options, "status-position")!=0)
+        return 1;
+    if (aux_status && options_get_number(s->options, "aux-status-position")!=0)
+        return 1;
+    return 0;
+}
+
+
+
 /* Retrieve options for left string. */
 static char *
 status_redraw_get_left(struct client *c, time_t t, struct grid_cell *gc,
@@ -259,6 +313,52 @@ status_redraw_get_right(struct client *c, time_t t, struct grid_cell *gc,
 	return (right);
 }
 
+/* Retrieve options for left string of aux status. */
+char *
+aux_status_redraw_get_left(struct client *c, time_t t, struct grid_cell *gc,
+    size_t *size)
+{
+	struct session	*s = c->session;
+	const char	*template;
+	char		*left;
+	size_t		 leftlen;
+
+	style_apply_update(gc, s->options, "aux-status-left-style");
+
+	template = options_get_string(s->options, "aux-status-left");
+	left = status_replace(c, NULL, template, t);
+
+	*size = options_get_number(s->options, "aux-status-left-length");
+
+	leftlen = screen_write_cstrlen("%s", left);
+	if (leftlen < *size)
+		*size = leftlen;
+	return (left);
+}
+
+/* Retrieve options for right string of aux status. */
+char *
+aux_status_redraw_get_right(struct client *c, time_t t, struct grid_cell *gc,
+    size_t *size)
+{
+	struct session	*s = c->session;
+	const char	*template;
+	char		*right;
+	size_t		 rightlen;
+
+	style_apply_update(gc, s->options, "aux-status-right-style");
+
+	template = options_get_string(s->options, "aux-status-right");
+	right = status_replace(c, NULL, template, t);
+
+	*size = options_get_number(s->options, "aux-status-right-length");
+	rightlen = screen_write_cstrlen("%s", right);
+	if (rightlen < *size)
+		*size = rightlen;
+	return (right);
+}
+
+
 /* Get window at window list position. */
 struct window *
 status_get_window_at(struct client *c, u_int x)
@@ -510,6 +610,90 @@ out:
 	return (1);
 }
 
+/* Draw aux-status for client on the last lines of given context. */
+int
+aux_status_redraw(struct client *c)
+{
+	struct screen_write_ctx	ctx;
+	struct session	       *s = c->session;
+	struct screen		old_aux_status;
+	struct grid_cell	stdgc, lgc, rgc;
+	struct options	       *oo;
+	time_t			t;
+	char		       *left, *right;
+	u_int			offset, needed;
+	size_t			llen, rlen;
+
+	/* No aux-status? */
+	if (c->tty.sy == 0 || !options_get_number(s->options, "aux-status"))
+		return (1);
+	left = right = NULL;
+
+	/* Store current time. */
+	t = time(NULL);
+
+	/* Set up default colour. */
+	style_apply(&stdgc, s->options, "aux-status-style");
+
+	/* Create the target screen. */
+	memcpy(&old_aux_status, &c->aux_status, sizeof old_aux_status);
+	screen_init(&c->aux_status, c->tty.sx, 1, 0);
+	screen_write_start(&ctx, NULL, &c->aux_status);
+	for (offset = 0; offset < c->tty.sx; offset++)
+		screen_write_putc(&ctx, &stdgc, ' ');
+	screen_write_stop(&ctx);
+
+	/* If the height is two lines, blank status line. */
+	if (c->tty.sy <= 2)
+		goto out;
+
+	/* Work out left and right strings. */
+	memcpy(&lgc, &stdgc, sizeof lgc);
+	left = aux_status_redraw_get_left(c, t, &lgc, &llen);
+	memcpy(&rgc, &stdgc, sizeof rgc);
+	right = aux_status_redraw_get_right(c, t, &rgc, &rlen);
+
+	/*
+	 * Do we have enough room?
+	 */
+	needed = 0;
+	if (llen != 0)
+		needed += llen;
+	if (rlen != 0)
+		needed += rlen;
+	if (c->tty.sx == 0 || c->tty.sx <= needed)
+		goto out;
+
+	/* Begin drawing. */
+	screen_write_start(&ctx, NULL, &c->aux_status);
+
+	/* Draw the left string */
+	screen_write_cursormove(&ctx, 0, 0);
+	if (llen != 0)
+		screen_write_cnputs(&ctx, llen, &lgc, "%s", left);
+
+	/* Draw the right string */
+	screen_write_cursormove(&ctx, c->tty.sx - rlen, 0);
+	if (rlen != 0)
+		screen_write_cnputs(&ctx, rlen, &rgc, "%s", right);
+
+	screen_write_stop(&ctx);
+
+out:
+	free(left);
+	free(right);
+
+	if (grid_compare(c->aux_status.grid, old_aux_status.grid) == 0) {
+		screen_free(&old_aux_status);
+		return (0);
+	}
+	screen_free(&old_aux_status);
+	return (1);
+}
+
+
+
+
 /* Replace special sequences in fmt. */
 static char *
 status_replace(struct client *c, struct winlink *wl, const char *fmt, time_t t)
diff --git a/tmux.h b/tmux.h
index adc020d5c86f0..d8f097f7a9433 100644
--- a/tmux.h
+++ b/tmux.h
@@ -1015,6 +1015,9 @@ struct mouse_event {
 
 	key_code	key;
 	int		statusat;
+    int		auxstatusat;
+    int		anyatzero;
+    int		anyonlast;
 
 	u_int		x;
 	u_int		y;
@@ -1355,6 +1358,7 @@ struct client {
 
 	struct event	 status_timer;
 	struct screen	 status;
+ 	struct screen	 aux_status;
 
 	struct screen	*old_status;
 
@@ -1930,6 +1934,10 @@ void	 status_update_saved(struct session *s);
 int	 status_at_line(struct client *);
 struct window *status_get_window_at(struct client *, u_int);
 int	 status_redraw(struct client *);
+int	 aux_status_at_line(struct client *);
+int	 any_status_at_zero(struct client *);
+int	 any_status_on_last(struct client *);
+int	 aux_status_redraw(struct client *);
 void printflike(2, 3) status_message_set(struct client *, const char *, ...);
 void	 status_message_clear(struct client *);
 int	 status_message_redraw(struct client *);
diff --git a/tty.c b/tty.c
index 0d1aa368f0de7..0f7df7ea162a8 100644
--- a/tty.c
+++ b/tty.c
@@ -1037,7 +1037,8 @@ tty_write(void (*cmdfn)(struct tty *, const struct tty_ctx *),
 
 		ctx->xoff = wp->xoff;
 		ctx->yoff = wp->yoff;
-		if (status_at_line(c) == 0)
+		/* if (status_at_line(c) == 0) */
+        if (any_status_at_zero(c))
 			ctx->yoff++;
 
 		cmdfn(&c->tty, ctx);
-- 
2.20.1

